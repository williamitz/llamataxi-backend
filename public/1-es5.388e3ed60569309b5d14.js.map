{"version":3,"sources":["webpack:///src/app/models/login.model.ts","webpack:///src/app/pages/authPages/login/login.component.html","webpack:///src/app/pages/authPages/login/login.component.ts","webpack:///src/app/layouts/auth-layout/auth-layout.module.ts","webpack:///src/app/layouts/auth-layout/auth-Layout.routes.ts"],"names":["LoginModel","this","userName","userPassword","LoginComponent","AuthLayoutModule","authSvc","storageSvc","router","io","loading","bodyLogin","frm","valid","onLogin","subscribe","res","ok","Error","error","showError","msg","onGetError","fire","title","text","icon","onSaveCredentials","token","data","onSingUserSocket","then","navigateByUrl","e","console","log","css","arrError","push","join","onLoginSubmit","AUTH_ROUTES","path","component","forChild"],"mappings":"ikBAAaA,EAIX,aAAa,wBACXC,KAAKC,SAAW,GAChBD,KAAKE,aAAe,I,2FCaA,eACE,mBACE,uBACF,OACF,Q,sBAWA,eACE,mBACE,uBACF,OACF,Q,sBAaE,eACI,eACJ,Q,ICtCbC,ECGAC,E,qDDHN,IAAMD,EAAN,WAKL,WAAoBE,EAA8BC,EAAoCC,EAAwBC,2BAA1F,KAAAH,UAA8B,KAAAC,aAAoC,KAAAC,SAAwB,KAAAC,KAF9G,KAAAC,WAHK,wDAQHT,KAAKU,UAAY,IAAIX,IARlB,oCAWUY,cACTA,EAAIC,QACNZ,KAAKS,WACLT,KAAKK,QAAQQ,QAASb,KAAKU,WAAYI,WAAYC,YACjD,IAAKA,EAAIC,GACP,MAAM,IAAIC,MAAOF,EAAIG,OAIvB,GAAsB,IAAlBH,EAAII,UAAiB,CAAC,IACXC,EAAQpB,EAAKqB,WAAYN,EAAII,WAA/B,IAQX,OAPA,IAAKG,KAAK,CACRC,MAAO,qBACPC,KAAMJ,EACNK,KAAM,iBAGRzB,EAAKS,YAKPT,EAAKM,WAAWoB,kBAAmBX,EAAIY,MAAOZ,EAAIa,MAClD5B,EAAKQ,GAAGqB,mBAAmBC,MAAM,WAC/B9B,EAAKS,WAELT,EAAKO,OAAOwB,cAAc,aAH5B/B,OAKSgC,YACPC,QAAQf,MAAM,qCAAsCc,MAGtDC,QAAQC,IAAInB,MAEdkB,QAAQC,IAAIlC,KAAKU,cA7ChB,iCAiDOS,GACV,IAAMgB,EAAoB,IAAdhB,EAAkB,UAAY,QACtCiB,EAAyB,IAAdjB,EAAkB,CAAC,SAAW,CAAC,IA2B9C,OAxBgB,EAAZA,IACFiB,EAAW,CAAC,wCAIE,EAAZjB,IACFiB,EAAW,CAAC,wCAIE,EAAZjB,GACFiB,EAASC,KAAK,yBAIA,EAAZlB,IACFiB,EAAW,CAAC,qBAAsB,qCAIpB,GAAZjB,IACFiB,EAAW,CAAC,qBAAsB,qCAG7B,CAACD,MAAKf,IAAKgB,EAASE,KAAK,WA9E7B,M,oCAAMnC,GAAc,0C,uBAAdA,EAAc,2uC,aDf3B,gBACI,gBACI,gBAEI,gBAEI,gBACI,gBAAO,4BAAqB,OAChC,OAEA,mBACI,gBACI,iBACI,iBACI,mBAA+B,gBAA8B,OACjE,OACA,uBAAsF,mEAAtF,OAEJ,OACA,yBAKJ,OAEA,kBACI,iBACI,iBACI,mBAA+B,gBAAsC,OACzE,OACA,uBAA4H,uEAA5H,OAEJ,OACA,yBAKJ,OAEA,kBACI,oBACA,oBACE,mBAAyB,uBAAW,OACtC,OACJ,OAEA,kBACI,qBAA4F,sDAAS,EAAAoC,cAAA,MACnG,qBACA,yBAGF,OACJ,OACJ,OACJ,OACJ,OACA,kBACI,kBACI,gBAA+B,iBAAO,4BAAgB,OAAQ,OAClE,OACA,kBACI,gBAA+B,iBAAO,8BAAkB,OAAQ,OACpE,OACJ,OACJ,OACJ,O,4CApDkH,8CAAgC,wHAGpH,wEAY0H,iDAAoC,yHAG9J,wEAe6C,8CAE3C,iC,kEG9CnBC,EAAsB,CACjC,CAAEC,KAAM,GAAIC,UAAW,GAEvB,CAAED,KAAM,KAAMC,UAAW,IDUpB,IAAMtC,EAAN,uC,qBAAMA,I,oDAAAA,IAAgB,SANlB,CACP,IACA,IACA,IAAauC,SAASH,O","file":"x","sourcesContent":["export class LoginModel {\r\n  userName: string;\r\n  userPassword: string;\r\n\r\n  constructor() {\r\n    this.userName = '';\r\n    this.userPassword = '';\r\n  }\r\n}\r\n","<div class=\"row justify-content-center\">\r\n    <div class=\"col-lg-5 col-md-7\">\r\n        <div class=\"card bg-secondary border-0 mb-0\">\r\n\r\n            <div class=\"card-body px-lg-5 py-lg-5\">\r\n\r\n                <div class=\"text-center text-muted mb-4\">\r\n                    <small>Iniciar sesi&oacute;n</small>\r\n                </div>\r\n\r\n                <form role=\"form\" #frmLogin=\"ngForm\">\r\n                    <div class=\"form-group mb-3\">\r\n                        <div class=\"input-group input-group-merge input-group-alternative\">\r\n                            <div class=\"input-group-prepend\">\r\n                                <span class=\"input-group-text\"><i class=\"ni ni-email-83\"></i></span>\r\n                            </div>\r\n                            <input class=\"form-control\" placeholder=\"Usuario\" name=\"userName\" #userName=\"ngModel\" [(ngModel)]=\"bodyLogin.userName\" required [ngClass]=\"{'is-invalid': userName.errors?.required && userName.touched,\r\n                        'is-valid': !userName.errors?.required && userName.touched}\">\r\n                        </div>\r\n                        <span *ngIf=\"userName.errors?.required && userName.touched\">\r\n                          <small class=\"text-danger\">\r\n                            *Requerido\r\n                          </small>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div class=\"form-group\">\r\n                        <div class=\"input-group input-group-merge input-group-alternative\">\r\n                            <div class=\"input-group-prepend\">\r\n                                <span class=\"input-group-text\"><i class=\"ni ni-lock-circle-open\"></i></span>\r\n                            </div>\r\n                            <input class=\"form-control\" type=\"password\" placeholder=\"Contrase&ntilde;a\" required name=\"userPassword\" #userPss=\"ngModel\" [(ngModel)]=\"bodyLogin.userPassword\" required [ngClass]=\"{'is-invalid': userPss.errors?.required && userPss.touched,\r\n                        'is-valid': !userPss.errors?.required && userPss.touched}\">\r\n                        </div>\r\n                        <span *ngIf=\"userPss.errors?.required && userPss.touched\">\r\n                          <small class=\"text-danger\">\r\n                            *Requerido\r\n                          </small>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div class=\"custom-control custom-control-alternative custom-checkbox\">\r\n                        <input class=\"custom-control-input\" id=\" customCheckLogin\" type=\"checkbox\">\r\n                        <label class=\"custom-control-label\" for=\" customCheckLogin\">\r\n                          <span class=\"text-muted\">Remember me</span>\r\n                        </label>\r\n                    </div>\r\n\r\n                    <div class=\"text-center\">\r\n                        <button type=\"button\" class=\"btn btn-primary my-4\" [disabled]=\"frmLogin.invalid || loading\" (click)=\"onLoginSubmit(frmLogin)\">\r\n                          Sign in\r\n                          <span *ngIf=\"loading\">\r\n                              <i class=\"fa fa-spinner fa-pulse \"></i>\r\n                          </span>\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n        <div class=\"row mt-3\">\r\n            <div class=\"col-6\">\r\n                <a href=\"#\" class=\"text-light\"><small>Forgot password?</small></a>\r\n            </div>\r\n            <div class=\"col-6 text-right\">\r\n                <a href=\"#\" class=\"text-light\"><small>Create new account</small></a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { LoginModel } from '../../../models/login.model';\r\nimport { NgForm } from '@angular/forms';\r\nimport { AuthService } from '../../../services/auth.service';\r\n\r\nimport { StorageService } from '../../../services/storage.service';\r\nimport { Router } from '@angular/router';\r\nimport swal from 'sweetalert2';\r\nimport { SocketService } from '../../../services/socket.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  bodyLogin: LoginModel;\r\n  loading = false;\r\n\r\n  constructor(private authSvc: AuthService, private storageSvc: StorageService, private router: Router, private io: SocketService) { }\r\n\r\n  ngOnInit() {\r\n    this.bodyLogin = new LoginModel();\r\n  }\r\n\r\n  onLoginSubmit( frm: NgForm ) {\r\n    if (frm.valid) {\r\n      this.loading = true;\r\n      this.authSvc.onLogin( this.bodyLogin ).subscribe( (res) => {\r\n        if (!res.ok) {\r\n          throw new Error( res.error );\r\n        }\r\n\r\n\r\n        if (res.showError !== 0) {\r\n          const { css, msg } = this.onGetError( res.showError );\r\n          swal.fire({\r\n            title: 'Mensaje al usuario',\r\n            text: msg,\r\n            icon: 'warning',\r\n            // buttons: ['Ok']\r\n          });\r\n          this.loading = false;\r\n          return;\r\n\r\n        }\r\n\r\n        this.storageSvc.onSaveCredentials( res.token, res.data );\r\n        this.io.onSingUserSocket().then( () => {\r\n          this.loading = false;\r\n          // console.log('usuario socket configurado' );\r\n          this.router.navigateByUrl('/admin');\r\n\r\n        }).catch(e => {\r\n          console.error('Error al configurar usuario socket', e);\r\n        });\r\n\r\n        console.log(res);\r\n      });\r\n      console.log(this.bodyLogin);\r\n    }\r\n  }\r\n\r\n  onGetError( showError: number ) {\r\n    const css = showError === 0 ? 'success' : 'error';\r\n    let arrError = showError !== 0 ? ['Error'] : [''];\r\n\r\n    // tslint:disable-next-line: no-bitwise\r\n    if (showError & 1) {\r\n      arrError = ['Usuario o contraseña incorrectos'];\r\n    }\r\n\r\n    // tslint:disable-next-line: no-bitwise\r\n    if (showError & 2) {\r\n      arrError = ['Usuario o contraseña incorrectos'];\r\n    }\r\n\r\n    // tslint:disable-next-line: no-bitwise\r\n    if (showError & 4) {\r\n      arrError.push('Usuario no verificado');\r\n    }\r\n\r\n    // tslint:disable-next-line: no-bitwise\r\n    if (showError & 8) {\r\n      arrError = ['Acceso restringido', 'comuniquese con el administrador'];\r\n    }\r\n\r\n    // tslint:disable-next-line: no-bitwise\r\n    if (showError & 16) {\r\n      arrError = ['Acceso restringido', 'comuniquese con el administrador'];\r\n    }\r\n\r\n    return {css, msg: arrError.join(', ')};\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { AUTH_ROUTES } from './auth-Layout.routes';\nimport { LoginComponent } from '../../pages/authPages/login/login.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule.forChild(AUTH_ROUTES)\n  ]\n})\nexport class AuthLayoutModule { }\n","import { Routes } from '@angular/router';\r\n\r\n\r\nimport { LoginComponent } from '../../pages/authPages/login/login.component';\r\n\r\nexport const AUTH_ROUTES: Routes = [\r\n  { path: '', component: LoginComponent },\r\n\r\n  { path: '**', component: LoginComponent },\r\n\r\n  //{ path: 'path/:routeParam', component: MyComponent },\r\n  //{ path: 'staticPath', component: ... },\r\n  //{ path: '**', component: ... },\r\n  //{ path: 'oldPath', redirectTo: '/staticPath' },\r\n  //{ path: ..., component: ..., data: { message: 'Custom' }\r\n];\r\n\r\n"]}